import { assert } from "chai";
// You can import and use all API from the 'vscode' module
// as well as import your extension to test it
import * as vscode from "vscode";
import { SemanticTokens } from "vscode-languageserver-protocol";
// import * as myExtension from '../../extension';

async function waitSeconds(secs: number) {
  return new Promise((r) => setTimeout(r, secs * 1000));
}
suite("Web Extension Test Suite", () => {
  vscode.window.showInformationMessage("Start all tests.");

  let compAUri: vscode.Uri;
  let compBUri: vscode.Uri;
  let unformattedUri: vscode.Uri;

  suiteSetup(async () => {
    const ext = vscode.extensions.getExtension("asafamr.svelte-web");
    assert.isOk(ext, "Could not activate extension!");
    await ext!.activate();

    const scheme = ext?.extensionUri.scheme === "file" ? "file" : "vscode-test-web";
    const pathPrefix = scheme === "file" ? ext?.extensionUri.fsPath + "/test" : "";

    compAUri = vscode.Uri.from({ scheme, path: pathPrefix + "/CompA.svelte" });
    compBUri = vscode.Uri.from({ scheme, path: pathPrefix + "/CompB.svelte" });
    unformattedUri = vscode.Uri.from({ scheme, path: pathPrefix + "/Unformatted.svelte" });

    await waitSeconds(5);
  });

  test("DefGotoAnotherFile", async () => {
    const doc = await vscode.workspace.openTextDocument(compAUri);
    const pos = doc.positionAt(doc.getText().indexOf("moduleExport"));
    const res = (await vscode.commands.executeCommand(
      "vscode.executeDefinitionProvider",
      doc.uri,
      pos
    )) as vscode.DefinitionLink[];
    assert.include(res[0].targetUri.path, "CompB.svelte");
  });

  test("TsDefGotoAnotherFile", async () => {
    const doc = await vscode.workspace.openTextDocument(compBUri);
    const pos = doc.positionAt(doc.getText().indexOf("PI_REAL"));
    const res = (await vscode.commands.executeCommand(
      "vscode.executeDefinitionProvider",
      doc.uri,
      pos
    )) as vscode.DefinitionLink[];
    assert.include(res[0].targetUri.path, "tsmod.ts");
  });

  test("Compiler", async () => {
    const doc = await vscode.workspace.openTextDocument(compAUri);
    await vscode.window.showTextDocument(doc, { preserveFocus: false });
    await waitSeconds(1);
    await vscode.commands.executeCommand("svelte.showCompiledCodeToSide");
    await waitSeconds(1);
    const compEditor = vscode.window.visibleTextEditors.find((x) => x.document.uri.scheme === "svelte-compiled");
    assert.isOk(compEditor);
    assert.isTrue(compEditor?.document?.getText()?.includes("generated by Svelte"));
  });

  test("SemanticTokens", async () => {
    const doc = await vscode.workspace.openTextDocument(compBUri);
    const tokenLegend = (await vscode.commands.executeCommand(
      "vscode.provideDocumentRangeSemanticTokensLegend",
      doc.uri
    )) as any;
    assert.deepEqual(tokenLegend, {
      tokenTypes: [
        "class",
        "enum",
        "interface",
        "namespace",
        "typeParameter",
        "type",
        "parameter",
        "variable",
        "enumMember",
        "property",
        "function",
        "method",
        "event",
      ],
      tokenModifiers: ["declaration", "static", "async", "readonly", "defaultLibrary", "local"],
    });
    const tokens = (await vscode.commands.executeCommand(
      "vscode.provideDocumentRangeSemanticTokens",
      doc.uri,
      new vscode.Range(new vscode.Position(0, 0), new vscode.Position(200, 0))
    )) as SemanticTokens;
    assert.sameOrderedMembers(Array.from(tokens?.data ?? []), [
      1,
      17,
      12,
      7,
      9,
      3,
      8,
      6,
      7,
      33,
      2,
      15,
      8,
      7,
      33,
      3,
      14,
      6,
      7,
      32,
      1,
      7,
      8,
      7,
      32,
    ]);
  });
  
  test("SymbolsProvider", async () => {
    const doc = await vscode.workspace.openTextDocument(compBUri);
    const symbols = (await vscode.commands.executeCommand("vscode.executeDocumentSymbolProvider", doc.uri)) as any[];
    assert.lengthOf(symbols, 2); //<script> X 2
  });

  test("Formatter", async () => {
    const doc = await vscode.workspace.openTextDocument(unformattedUri);
    const textEdits = (await vscode.commands.executeCommand("vscode.executeFormatDocumentProvider", doc.uri, {
      insertSpaces: true,
      tabSize: 2,
    })) as any[];
    const workEdits = new vscode.WorkspaceEdit();
    workEdits.set(doc.uri, textEdits);
    await vscode.workspace.applyEdit(workEdits);
    assert.equal(
      doc.getText(),
      '<script context="module" lang="ts">\n  export const moduleExport: string = "exp";\n</script>\n\n<script>\n  let myname = "B";\n  export let paramNum = 100;\n</script>\n\nthis is comp {myname}<!----->\nparam {paramNum}\n\n<style>\n  div {\n    color: var(--asd, blue); /* --- */\n  }\n</style>\n'
    );
  });

  test("ColorProvider", async () => {
    const doc = await vscode.workspace.openTextDocument(compAUri);
    const colors = (await vscode.commands.executeCommand("vscode.executeDocumentColorProvider", doc.uri)) as any[];
    assert.ok(colors);
    assert.lengthOf(colors, 3);
    const expected: any = [
      { red: 1, green: 0, blue: 0, alpha: 1 },
      {
        red: 0.9411764705882353,
        green: 0.9725490196078431,
        blue: 1,
        alpha: 1,
      },
      {
        red: 0.4980392156862745,
        green: 0.4980392156862745,
        blue: 0.4980392156862745,
        alpha: 1,
      },
    ];

    for (const i of [0, 1, 2]) {
      for (const prop in expected[i]) {
        assert.approximately(colors[i].color[prop], expected[i][prop], 1e-4, `color #${i}[${prop}] not matching`);
      }
    }
  });
});
